
Class or typing.Newtype for mpmath.mpf str with GUI Validator
? Class or typing.Newtype for Xrange ? str with GUI Validator

file prefix : is one option of calc
So calc edit Should have a "run" button - race condition ??

Postprocessing

Define Postproc_key / as union of types
issue : even the postpric_type specified, their could be "imposed / default vals"

| click        | name | type (selectable if is Union) | User input with validation. Could be embedded
 (if has def)                                               Widget with Frame. Not editable if def.


from typing import Union, get_origin, get_args

Now the hard part , the 'user input with validation'
  int -> OK
  float -> OK
  mpf_str ->   if mp.math.mpf parse ? or could use simple "double" from pyqt ?
  locally defined typing.Type :

collections.namedtuple ?
To support pickling, the named tuple class should be assigned to a variable that matches typename.

class Employee(NamedTuple):
    name: str
    id: int
 
class Employee(NamedTuple):
    name: str
    id: int = 3

In [11]: Employee.__annotations__
Out[11]: {'name': str, 'id': int}

In [12]: Employee._field_defaults
Out[12]: {'id': 3}


OR ???
https://docs.python.org/3/library/dataclasses.html

@dataclass
class Employee_dc:
    name: str
    id: int = 3

Employee_dc.__annotations__
Employee_dc.__init__.__annotations__

https://docs.python.org/3/library/dataclasses.html#dataclasses.field


TODO list :
- colormap editor   -> Done 29/08/2021
- Dedicated classes for postproc -> done 14/09/2021
- array editor      -> later
- launch function in separate thread + add popup with timer + "close on finish" tickbox -> ~ OK 03/10/2021
- use memory map to update only glitched pixels when glitch corretion loop. Mean use separate .npy files ? -> done 14/09/2021
- investigate interior detection issues -> later. temp fix
- interactive functions (like, newton etc.)
- test speed for extended range vs standard range with numba
- customisable first seed selection (like: seed = ((method="newton", start="center", order="ball1", prec="current", iter=""),
                                                    (method="newton_any", start="previous", order="previous", prec="x 1.5", iter="")))
- faster mpmath  -> later
- GUI for Blinn_lighting class


continuous integration test
https://github.com/DeepLabCut/DeepLabCut/blob/master/.github/workflows/python-package.yml

