# -*- coding: utf-8 -*-
"""
=========================
Example Interactive
=========================
Example plot
"""

import numpy as np
import os
from PyQt5 import QtGui

import fractalshades as fs
import fractalshades.models as fsm
import fractalshades.settings as settings
import fractalshades.colors as fscolors
import fractalshades.gui as fsgui

from fractalshades.postproc import (
    Postproc_batch,
    Continuous_iter_pp,
    DEM_normal_pp,
    Raw_pp,
    Fieldlines_pp
)
from fractalshades.colors.layers import (
    Color_layer,
    Bool_layer,
    Normal_map_layer,
    Virtual_layer,
    Blinn_lighting
)


def plot(plot_dir):
    """
    Example interactive
    """
    import mpmath
#    import numpy as np
#    import fractalshades as fs
#    import fractalshades.models as fsm
#    import fractalshades.colors as fscolors
    x = '-1.0'
    y = '-0.0'
    dx = '5.0'
    calc_name = 'test'
#    x = '-1.3946566098506499504829799455764876353014024400777060452537569774'
#    y = '0.015824206635236152220786654128816548666412248773926125324037648824'
#    dx = '1.062240111665733e-55'
#    x = "-1.3946566098506499504829799455764876353014024400777060452613826135087015500753"
#    y = "0.015824206635236152220786654128816548666412248773926125317532981685511096081278"
#    dx = "5.866507293156746e-67"
    
    xy_ratio = 1.0
    dps = 77
    max_iter = 150000
    nx = 800
    interior_detect = True
    epsilon_stationnary = 0.0001
    
    gold = np.array([255, 210, 66]) / 255.
    black = np.array([0, 0, 0]) / 255.
    purple = np.array([181, 40, 99]) / 255.
    citrus2 = np.array([103, 189, 0]) / 255.
    colors = np.vstack((gold[np.newaxis, :],
                         purple[np.newaxis, :]))
#    colormap = fscolors.Fractal_colormap(colors=colors, kinds="Lab", 
#         grad_npts=200, grad_funcs="x", extent="mirror")
    colormap = fscolors.Fractal_colormap(
    colors=[[0.        , 0.59215686, 0.63921569],
 [0.01568627, 0.64705882, 0.68627451],
 [0.01176471, 0.63921569, 0.6745098 ],
 [0.        , 0.62352941, 0.65882353],
 [0.01568627, 0.65098039, 0.68627451],
 [0.03529412, 0.67058824, 0.70588235],
 [0.00784314, 0.63921569, 0.6745098 ],
 [0.01176471, 0.63921569, 0.67843137],
 [0.        , 0.61568627, 0.64705882],
 [0.01568627, 0.65490196, 0.69019608],
 [0.        , 0.63921569, 0.66666667],
 [0.        , 0.64705882, 0.67058824],
 [0.06666667, 0.66666667, 0.68627451],
 [0.05490196, 0.63137255, 0.66666667],
 [0.18431373, 0.70588235, 0.74117647],
 [0.14901961, 0.63529412, 0.66666667],
 [0.08627451, 0.63921569, 0.66666667],
 [0.22352941, 0.67843137, 0.70980392],
 [0.16470588, 0.62745098, 0.6627451 ],
 [0.23529412, 0.67058824, 0.69411765],
 [0.27843137, 0.68235294, 0.71372549],
 [0.24705882, 0.71372549, 0.74509804],
 [0.19607843, 0.63921569, 0.6627451 ],
 [0.23529412, 0.68235294, 0.70588235],
 [0.21176471, 0.62745098, 0.64705882],
 [0.30588235, 0.67058824, 0.69019608],
 [0.29019608, 0.6627451 , 0.67843137],
 [0.37647059, 0.70196078, 0.71764706],
 [0.4       , 0.6745098 , 0.69411765],
 [0.41568627, 0.69019608, 0.70980392],
 [0.39215686, 0.68235294, 0.69411765],
 [0.38823529, 0.66666667, 0.6745098 ],
 [0.42352941, 0.65490196, 0.65882353],
 [0.47058824, 0.67058824, 0.68235294],
 [0.50980392, 0.68627451, 0.69803922],
 [0.5254902 , 0.70588235, 0.71764706],
 [0.53333333, 0.69803922, 0.70588235],
 [0.5372549 , 0.6745098 , 0.68235294],
 [0.54509804, 0.66666667, 0.67843137],
 [0.56078431, 0.67843137, 0.67843137],
 [0.56862745, 0.68235294, 0.6745098 ],
 [0.61176471, 0.69803922, 0.69411765],
 [0.59215686, 0.66666667, 0.65882353],
 [0.58823529, 0.6627451 , 0.64705882],
 [0.63921569, 0.68627451, 0.67843137],
 [0.68235294, 0.69019608, 0.67843137],
 [0.6627451 , 0.67058824, 0.65098039],
 [0.67843137, 0.67843137, 0.65490196],
 [0.69411765, 0.66666667, 0.64313725],
 [0.7254902 , 0.69019608, 0.6627451 ],
 [0.72941176, 0.69019608, 0.65490196],
 [0.74117647, 0.68235294, 0.65490196],
 [0.76078431, 0.69411765, 0.65490196],
 [0.77647059, 0.68627451, 0.65490196],
 [0.76470588, 0.67058824, 0.63137255],
 [0.78039216, 0.68627451, 0.64705882],
 [0.8       , 0.69019608, 0.64705882],
 [0.80392157, 0.65882353, 0.62352941],
 [0.83529412, 0.69019608, 0.65490196],
 [0.81568627, 0.66666667, 0.63137255],
 [0.81568627, 0.66666667, 0.62352941],
 [0.81176471, 0.64705882, 0.6       ],
 [0.82745098, 0.65490196, 0.61176471],
 [0.83137255, 0.65882353, 0.60784314],
 [0.82352941, 0.65490196, 0.59215686],
 [0.84313725, 0.66666667, 0.59215686],
 [0.84313725, 0.65882353, 0.58039216],
 [0.8627451 , 0.65882353, 0.57254902],
 [0.87058824, 0.66666667, 0.57647059],
 [0.87058824, 0.65882353, 0.54901961],
 [0.87843137, 0.65882353, 0.52156863],
 [0.91764706, 0.6745098 , 0.52941176],
 [0.89019608, 0.64705882, 0.49411765],
 [0.90980392, 0.62745098, 0.47843137],
 [0.89019608, 0.61960784, 0.45882353],
 [0.92156863, 0.63137255, 0.45490196],
 [0.90980392, 0.61960784, 0.44313725],
 [0.90196078, 0.6       , 0.42352941],
 [0.90588235, 0.59607843, 0.42745098],
 [0.92941176, 0.59215686, 0.42352941],
 [0.9254902 , 0.58431373, 0.40784314],
 [0.90980392, 0.58039216, 0.4       ],
 [0.9254902 , 0.56862745, 0.39215686],
 [0.94117647, 0.56862745, 0.38823529],
 [0.9372549 , 0.55294118, 0.36862745],
 [0.90980392, 0.5254902 , 0.33333333],
 [0.91372549, 0.5372549 , 0.34901961],
 [0.9372549 , 0.53333333, 0.35686275],
 [0.95294118, 0.54117647, 0.35686275],
 [0.94901961, 0.54509804, 0.35294118],
 [0.9372549 , 0.49803922, 0.34117647],
 [0.92156863, 0.49803922, 0.31764706],
 [0.9254902 , 0.48235294, 0.31764706],
 [0.91764706, 0.47843137, 0.32156863],
 [0.91372549, 0.46666667, 0.32156863],
 [0.92941176, 0.48235294, 0.34901961],
 [0.9254902 , 0.48627451, 0.34117647],
 [0.91764706, 0.47843137, 0.3372549 ],
 [0.91764706, 0.4745098 , 0.34901961],
 [0.89019608, 0.44313725, 0.34901961],
 [0.91372549, 0.47843137, 0.4       ],
 [0.86666667, 0.44705882, 0.36862745],
 [0.81960784, 0.40784314, 0.34509804],
 [0.80392157, 0.40784314, 0.36470588],
 [0.80392157, 0.45490196, 0.42352941],
 [0.69019608, 0.40392157, 0.39215686],
 [0.67843137, 0.43921569, 0.43529412],
 [0.69019608, 0.45490196, 0.44313725],
 [0.41960784, 0.45882353, 0.46666667],
 [0.3254902 , 0.41176471, 0.42352941],
 [0.30588235, 0.41960784, 0.42745098],
 [0.24705882, 0.38039216, 0.39607843],
 [0.2       , 0.38039216, 0.41176471],
 [0.09411765, 0.34117647, 0.37647059],
 [0.04313725, 0.32941176, 0.37254902],
 [0.43137255, 0.41568627, 0.41960784],
 [0.42745098, 0.44705882, 0.45882353],
 [0.38039216, 0.41960784, 0.42745098],
 [0.35686275, 0.41960784, 0.43137255],
 [0.37647059, 0.43137255, 0.43529412],
 [0.39215686, 0.4627451 , 0.47058824],
 [0.34901961, 0.44313725, 0.45098039],
 [0.29019608, 0.38823529, 0.38823529],
 [0.14901961, 0.23529412, 0.25490196],
 [0.17647059, 0.2745098 , 0.28627451],
 [0.14901961, 0.31764706, 0.30588235],
 [0.08235294, 0.22352941, 0.18039216],
 [0.14509804, 0.30588235, 0.24313725],
 [0.17647059, 0.30196078, 0.29019608],
 [0.11764706, 0.20392157, 0.19607843],
 [0.01568627, 0.1372549 , 0.14509804],
 [0.10980392, 0.19607843, 0.19215686],
 [0.01176471, 0.11764706, 0.12156863],
 [0.05098039, 0.16862745, 0.17647059],
 [0.05490196, 0.12156863, 0.14901961],
 [0.66666667, 0.54509804, 0.48235294],
 [0.10980392, 0.25098039, 0.2627451 ],
 [0.07843137, 0.15686275, 0.18823529],
 [0.03529412, 0.04705882, 0.08627451],
 [0.78039216, 0.59215686, 0.54117647],
 [0.12941176, 0.11764706, 0.11372549],
 [0.01960784, 0.08235294, 0.10196078],
 [0.02352941, 0.05098039, 0.09411765],
 [0.02745098, 0.09803922, 0.1254902 ],
 [0.57647059, 0.57254902, 0.56470588],
 [0.75294118, 0.60392157, 0.58039216],
 [0.70980392, 0.56078431, 0.54117647],
 [0.65490196, 0.54117647, 0.54901961],
 [0.70980392, 0.47843137, 0.4627451 ],
 [0.45490196, 0.41568627, 0.3372549 ],
 [0.07058824, 0.17647059, 0.18431373],
 [0.1372549 , 0.20784314, 0.20784314],
 [0.16470588, 0.14117647, 0.14901961],
 [0.3254902 , 0.37254902, 0.33333333],
 [0.41176471, 0.45882353, 0.41960784],
 [0.48627451, 0.43529412, 0.38823529],
 [0.67058824, 0.52941176, 0.46666667],
 [0.65490196, 0.49019608, 0.44313725],
 [0.77254902, 0.59215686, 0.52941176],
 [0.71372549, 0.54901961, 0.51372549],
 [0.69019608, 0.51764706, 0.46666667],
 [0.70196078, 0.47058824, 0.42352941],
 [0.71372549, 0.68235294, 0.7254902 ],
 [0.56862745, 0.56862745, 0.58823529],
 [0.4627451 , 0.56078431, 0.57254902],
 [0.39215686, 0.4       , 0.41960784],
 [0.43137255, 0.34509804, 0.36862745],
 [0.28627451, 0.24313725, 0.25098039],
 [0.28627451, 0.10980392, 0.16078431],
 [0.24705882, 0.11764706, 0.08627451],
 [0.30196078, 0.14117647, 0.13333333],
 [0.11764706, 0.04313725, 0.03921569],
 [0.2       , 0.16078431, 0.17647059],
 [0.4627451 , 0.44313725, 0.45882353],
 [0.46666667, 0.42745098, 0.43137255],
 [0.12156863, 0.22352941, 0.22745098],
 [0.69411765, 0.7254902 , 0.75686275],
 [0.62745098, 0.56470588, 0.60392157],
 [0.71372549, 0.69411765, 0.71764706],
 [0.52941176, 0.4745098 , 0.49019608],
 [0.75686275, 0.73333333, 0.77254902],
 [0.69411765, 0.65098039, 0.68627451],
 [0.7254902 , 0.71764706, 0.76078431],
 [0.77254902, 0.74117647, 0.78431373],
 [0.75294118, 0.7372549 , 0.79215686],
 [0.76862745, 0.7372549 , 0.79215686],
 [0.74901961, 0.74901961, 0.79607843],
 [0.71372549, 0.67058824, 0.7372549 ],
 [0.81960784, 0.75686275, 0.79607843],
 [0.70588235, 0.69803922, 0.74117647],
 [0.79215686, 0.76078431, 0.80392157],
 [0.75686275, 0.70980392, 0.74509804],
 [0.55686275, 0.40784314, 0.41568627],
 [0.76470588, 0.69803922, 0.72941176],
 [0.74901961, 0.69019608, 0.72941176],
 [0.79607843, 0.65490196, 0.66666667],
 [0.74901961, 0.70980392, 0.74509804],
 [0.64705882, 0.43921569, 0.42745098],
 [0.65882353, 0.50588235, 0.4745098 ],
 [0.73333333, 0.67843137, 0.67058824],
 [0.54509804, 0.50196078, 0.49803922],
 [0.59215686, 0.54509804, 0.54509804],
 [0.4745098 , 0.44313725, 0.43529412],
 [0.70980392, 0.63529412, 0.61176471],
 [0.65882353, 0.54901961, 0.50588235],
 [0.70980392, 0.55294118, 0.53333333],
 [0.67843137, 0.60784314, 0.61568627],
 [0.43529412, 0.28235294, 0.28627451],
 [0.79215686, 0.58823529, 0.46666667],
 [0.62745098, 0.51372549, 0.45882353],
 [0.68235294, 0.56862745, 0.51372549],
 [0.6627451 , 0.54901961, 0.49411765],
 [0.65098039, 0.56078431, 0.50588235],
 [0.62352941, 0.52156863, 0.4627451 ],
 [0.60392157, 0.49803922, 0.44313725],
 [0.6627451 , 0.57647059, 0.52156863],
 [0.56470588, 0.49019608, 0.43137255],
 [0.56470588, 0.47843137, 0.42352941],
 [0.61960784, 0.55294118, 0.49019608],
 [0.54901961, 0.47843137, 0.42352941],
 [0.62352941, 0.55686275, 0.50196078],
 [0.61568627, 0.54901961, 0.49411765],
 [0.52941176, 0.4745098 , 0.42352941],
 [0.58039216, 0.51764706, 0.46666667],
 [0.49019608, 0.47843137, 0.41568627],
 [0.58039216, 0.53333333, 0.48627451],
 [0.55686275, 0.50588235, 0.43921569],
 [0.48235294, 0.42352941, 0.36470588],
 [0.56470588, 0.50196078, 0.45098039],
 [0.56470588, 0.52941176, 0.47058824],
 [0.50588235, 0.46666667, 0.41960784],
 [0.54117647, 0.48627451, 0.45098039],
 [0.46666667, 0.45098039, 0.41568627],
 [0.57647059, 0.52941176, 0.48235294],
 [0.49803922, 0.45098039, 0.40392157],
 [0.45098039, 0.41176471, 0.37254902],
 [0.40784314, 0.38823529, 0.33333333],
 [0.40784314, 0.41568627, 0.36078431],
 [0.58039216, 0.50588235, 0.49803922],
 [0.4627451 , 0.43921569, 0.38431373],
 [0.41568627, 0.38039216, 0.34509804],
 [0.41176471, 0.42745098, 0.37254902],
 [0.36862745, 0.36862745, 0.32156863],
 [0.41176471, 0.42745098, 0.36862745],
 [0.38823529, 0.37254902, 0.3254902 ],
 [0.49019608, 0.48235294, 0.43137255],
 [0.40392157, 0.40392157, 0.36470588],
 [0.44705882, 0.43921569, 0.39215686],
 [0.52941176, 0.52156863, 0.4627451 ],
 [0.5372549 , 0.45490196, 0.40392157],
 [0.31764706, 0.36862745, 0.30980392],
 [0.40392157, 0.41176471, 0.34901961],
 [0.37254902, 0.38039216, 0.3372549 ],
 [0.35686275, 0.36862745, 0.32156863],
 [0.4       , 0.40784314, 0.36470588],
 [0.27843137, 0.29411765, 0.23921569]],
    kinds=['Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch', 'Lch'],
    grad_npts=[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
 4, 4, 4, 4, 4],
    grad_funcs=['x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x'],
    extent='mirror'
)
    
    
    probes_zmax = 0.15

    # Set to True to enable multi-processing
    settings.enable_multiprocessing = True
    
    # test_dir = os.path.dirname(plot_dir)
    directory = plot_dir
    fractal = fsm.Perturbation_mandelbrot(directory)
    
    def func(fractal: fsm.Perturbation_mandelbrot=fractal,
             calc_name: str= calc_name,
             x: mpmath.mpf= x,
             y: mpmath.mpf= y,
             dx: mpmath.mpf= dx,
             xy_ratio: float=xy_ratio,
             dps: int= dps,
             max_iter: int=max_iter,
             nx: int=nx,
             interior_detect: bool=interior_detect,
             interior_color: QtGui.QColor=(0., 0., 1.),
             probes_zmax: float=probes_zmax,
             epsilon_stationnary: float=epsilon_stationnary,
             colormap: fscolors.Fractal_colormap=colormap):
        


        fractal.zoom(precision=dps, x=x, y=y, dx=dx, nx=nx, xy_ratio=xy_ratio,
             theta_deg=0., projection="cartesian", antialiasing=False)

        fractal.calc_std_div(datatype=np.complex128, calc_name=calc_name,
            subset=None, max_iter=max_iter, M_divergence=1.e3,
            epsilon_stationnary=1.e-4,
            SA_params={"cutdeg": 8,
                       "SA_err": 1.e-6,
                       "cutdeg_glitch": 8,
                       "use_Taylor_shift": False},
            glitch_eps=1.e-6,
            interior_detect=interior_detect,
            glitch_max_attempt=10)

        if fractal.res_available():
            print("RES AVAILABLE, no compute")
            # fractal.clean_up(file_prefix)
        else:
            print("RES NOT AVAILABLE, clean-up")
            fractal.clean_up(calc_name)

        fractal.run()

        layer_name = "continuous_iter"

        pp = Postproc_batch(fractal, calc_name)
        pp.add_postproc(layer_name, Continuous_iter_pp())
        pp.add_postproc("interior", Raw_pp("stop_reason",
                        func=lambda x: x != 1))
        pp.add_postproc("DEM_map", DEM_normal_pp(kind="potential"))

        plotter = fs.Fractal_plotter(pp)   
        plotter.add_layer(Bool_layer("interior", output=False))
        plotter.add_layer(Normal_map_layer("DEM_map", max_slope=45, output=True))
        plotter.add_layer(Color_layer(
                layer_name,
                func=lambda x: np.log(x),
                colormap=colormap,
                probes_z=[0., probes_zmax],
                probes_kind="relative",
                output=True))
        plotter[layer_name].set_mask(plotter["interior"],
                                      mask_color=interior_color)

        light = Blinn_lighting(0.2, np.array([1., 1., 1.]))
        light.add_light_source(
            k_diffuse=1.05,
            k_specular=.0,
            shininess=350.,
            angles=(50., 50.),
            coords=None,
            color=np.array([1.0, 1.0, 0.9]))
#        light.add_light_source(
#            k_diffuse=0.,
#            k_specular=1.5,
#            shininess=350.,
#            angles=(50., 40.),
#            coords=None,
#            color=np.array([1.0, 1.0, 0.9]),
#            material_specular_color=np.array([1.0, 1.0, 1.0])
#            )
        plotter[layer_name].shade(plotter["DEM_map"], light)
        plotter.plot()
        
        # Renaming output to match expected from the Fractal GUI
        layer = plotter[layer_name]
        file_name = "{}_{}".format(type(layer).__name__, layer.postname)
        src_path = os.path.join(fractal.directory, file_name + ".png")
        dest_path = os.path.join(fractal.directory, calc_name + ".png")
        if os.path.isfile(dest_path):
            os.unlink(dest_path)
        os.link(src_path, dest_path)


    gui = fsgui.Fractal_GUI(func)
    gui.connect_image(image_param="calc_name")
    gui.connect_mouse(x="x", y="y", dx="dx", xy_ratio="xy_ratio", dps="dps")
    gui.show()
   # gui.mainwin._func_wget.run_func()
    

if __name__ == "__main__":
    # Some magic to get the directory for plotting: with a name that matches
    # the file or a temporary dir if we are building the documentation
    try:
        realpath = os.path.realpath(__file__)
        plot_dir = os.path.splitext(realpath)[0]
        plot(plot_dir)
    except NameError:
        import tempfile
        with tempfile.TemporaryDirectory() as plot_dir:
            plot(plot_dir)